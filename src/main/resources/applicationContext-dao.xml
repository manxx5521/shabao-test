<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">
	<!--配置数据库相关参数-->
	<!--扫描注册DAO相关包-->
	<context:component-scan base-package="com.xiaoshabao.**.dao" />
	<!--定义c3p0数据源
	<bean id="dataSource1" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/shabaotest" />
		<property name="user" value="root" />
		<property name="password" value="19911105man" />
		<property name="initialPoolSize" value="5" />
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="30" />
		<property name="maxIdleTime" value="600" />
		<property name="acquireIncrement" value="5" />
		<property name="checkoutTimeout" value="60000" />
		当连接失败时的重试次数
		<property name="acquireRetryAttempts" value="60000" />
	</bean>
	-->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
      <!-- 基本属性 url、user、password -->
      <property name="url" value="${jdbc.url}" />
      <property name="username" value="${jdbc.username}" />
      <property name="password" value="${jdbc.password}" />
      <!-- 配置初始化大小、最小、最大 -->
      <property name="initialSize" value="${jdbc.initialSize}" />
      <property name="minIdle" value="${jdbc.minIdle}" /> 
      <property name="maxActive" value="${jdbc.maxActive}" />
      <!-- 配置获取连接等待超时的时间 -->
      <property name="maxWait" value="${jdbc.maxWait}" />
      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
      <property name="validationQuery" value="SELECT 'x'" />
      <property name="testWhileIdle" value="true" />
      <property name="testOnBorrow" value="false" />
      <property name="testOnReturn" value="false" />
      <!-- 打开PSCache，并且指定每个连接上PSCache的大小
      	如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false -->
      <property name="poolPreparedStatements" value="false" />
      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
      <!-- 配置监控统计拦截的filters -->
      <property name="filters" value="stat" /> 
  	</bean>
	
	<!--sqlSessionFactory配置-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--注入数据源-->
		<property name="dataSource" ref="dataSource" />
		<!--mybatis全局配置-->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!--扫描entity和dto 使用别名，在sql配置中使用别名替代 包名+别名。此处已经在mybatis的配置文件中配置了
		<property name="typeAliasesPackage" value="com.xiaoshabao.shabaowebtest.entity;com.xiaoshabao.shabaowebtest.dto" />
		-->
		<!-- 自动扫描mapping目录，省去mybits的Configuration.XML手工配置 -->
		<property name="mapperLocations" value="classpath:sqlmaps/**/*SQL.xml" />
	</bean>
	
	<!--配置扫描DAO接口包，动态实现DAO接口，注入到spring中-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--注入sqlSessionFactory-->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!--给出需要扫描DAO接口包-->
		<property name="basePackage" value="com.xiaoshabao.**.dao" />
	</bean>
	<!-- 事务配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--配置声明式的事务，默认使用注解方式管理-->
	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>

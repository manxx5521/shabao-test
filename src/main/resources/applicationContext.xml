<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">
        
    <!-- 加载配置文件便于系统使用 -多个可用逗号分割-->
	<context:property-placeholder location="classpath*:/config.properties"
		ignore-resource-not-found="true" ignore-unresolvable="true" />
	<!--配置service相关配置-->
	<!--扫描service包下所有使用注解的类型-->
	<context:component-scan base-package="com.xiaoshabao.**.service" />
	<context:component-scan base-package="com.xiaoshabao.*.shiro" />
	<context:component-scan base-package="com.xiaoshabao.**.component" />
	<context:component-scan base-package="com.xiaoshabao.*.job" />
	
	<!-- shiro配置 begin -->
	<!-- 自定义Realm -->
	<bean id="myRealm" class="com.xiaoshabao.system.shiro.MyRealm"/>  
	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
  	  <property name="realm" ref="myRealm"/>  
	</bean>  
	<!-- Shiro过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
	    <!-- Shiro的核心安全接口,这个属性是必须的 -->  
	    <property name="securityManager" ref="securityManager"/>
	    <!-- 身份认证失败，则跳转到登录页面的配置 -->  
	    <property name="loginUrl" value="/admin/login.html"/>
	    <!-- 权限认证失败，则跳转到指定页面 -->  
	    <property name="unauthorizedUrl" value="/admin/unauthor.jsp"/>  
	    <!-- Shiro连接约束配置,即过滤链的定义 -->  
	    <property name="filterChainDefinitions">  
	        <value>  
	            /admin/login.html=anon
	            /admin/loginIN.html=anon
	            /admin/accountUser=perms["wUser:select"]
	            /admin/wechatUserList=perms["wUser:select"]
				/admin/**=authc
	        </value>  
	    </property>
	</bean>  
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
	<!-- 开启Shiro注解 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
  		<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
  	  <property name="securityManager" ref="securityManager"/>  
    </bean>  
	<!-- shiro配置 end -->
	
	<!-- redis 设置begin -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxIdle" value="${redis.maxIdle}"/><!-- 最大闲置 -->
        <property name="minIdle" value="${redis.minIdle}"/><!-- 最小闲置 -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/><!-- 可以获取 -->
    </bean>  
      
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"  
        p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}"  p:pool-config-ref="jedisPoolConfig"/>  
      
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">  
        <property name="connectionFactory"   ref="connectionFactory" />  
    </bean> 
	<!-- redis 设置end -->
	
	<!-- 任务调度 begin -->
	<bean name="startQuertz" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="updateAccessTokenTrigger" />
			</list>
		</property>
	</bean>
	<!--定义任务触发时间等-->
	<bean id="updateAccessTokenTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail">
			<ref bean="updateAccessTokenJobDetail" />
		</property>
		<property name="cronExpression">
			<value>0 0/10 * * * ?</value>
		</property>
	</bean>
	<!--定义任务描述，所在类和方法等-->
	<bean id="updateAccessTokenJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="updateAccessTokenJob" />
		</property>
		<property name="targetMethod">
			<value>work</value>
		</property>
	</bean>
	<!-- 注入任务-->
	<bean id="updateAccessTokenJob" class="com.xiaoshabao.wechat.job.UpdateAccessTokenJob" />
	<!-- 任务调度 end -->
	
	<!-- 项目自定义配置 begin-->
	<!-- web项目中获取项目session参数 -->
	<bean id="contextSession" class="com.xiaoshabao.system.component.ContextHolderSystem" />
	
	<!-- 项目中获取项目token参数服务类 -->
	<bean id="tokenManager" class="com.xiaoshabao.wechat.component.TokenManager" >
		<property name="tokenService">
			<ref bean="${wechat.tokenService}" />
		</property>
	</bean>
	<!-- 项目自定义配置 end-->
</beans>
